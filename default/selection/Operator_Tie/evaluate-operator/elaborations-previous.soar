###
###      7.3.2   The evaluation subgoal
###

###
### These productions which fire once an evaluation subgoal has been created
### have also been generalized.

sp {evaluate-operator*elaborate*state*copy-structure
   :default
   (state <s> ^superstate <ss>)
   (<ss> ^copy-structure <scs>
         ^operator <so>)
   (<so> ^name evaluate-operator)
-->
   (<s> ^super-copy-structure <scs>
        ^copy-structure <cs>) # New copy-structure for evaluate-operator state
   (<cs> ^state <s> # The copying is to the current state 
                    #(as opposed to what happens in selection with a separate state
         ^superstate <ss>
         ^superstate-operator <so>)}

sp {evaluate-operator*elaborate*state*desired
   :default
   (state <s> ^super-copy-structure <scs>)
   (<scs> -^problem-space.no-local-negations <nln>
          -^default-desired-copy yes
           ^superstate-desired <d>)
-->
   (<s> ^desired <d>)}

sp {evaluate-operator*elaborate*state*desired*nln
   :default
   (state <s> ^super-copy-structure <scs>)
   (<scs> ^problem-space.no-local-negations <nln>
          ^superstate-desired <d>)
-->
   (<s> ^desired <d>)}

sp {evaluate-operator*elaborate*copy-structure*problem-space
   :default
   (state <s> ^super-copy-structure.problem-space <ps>
              ^copy-structure <cs>)
-->
   (<cs> ^problem-space <ps>)
}# (<s> ^problem-space <ps>)}

sp {evaluate-operator*elaborate*copy-structure*all-attributes-at-level
   :default
   (state <s> ^super-copy-structure.all-attributes-at-level <x>
              ^copy-structure <cs>)
-->
   (<cs> ^all-attributes-at-level <x>)}

sp {evaluate-operator*elaborate*copy-structure*default-state-copy
   :default
   (state <s> ^super-copy-structure.default-state-copy <x>
              ^copy-structure <cs>)
-->
   (<cs> ^default-state-copy <x>)}

sp {evaluate-operator*elaborate*copy-structure*default-operator-copy
   :default
   (state <s> ^super-copy-structure.default-operator-copy <x>
              ^copy-structure <cs>)
-->
   (<cs> ^default-operaotr-copy <x>)}

sp {evaluate-operator*elaborate*state*name
   :default
   (state <s> ^super-copy-structure.superstate.name {<> evaluate-operator <name> })
-->
   (<s> ^name <name>)}     # the task name and is in addition to evaluate-operator

## install a copy of the state, when ^default-state-copying and there
## is an operator tie.

sp {evaluate-operator*elaborate*state*duplicate-of
   :default
   (state <s> ^super-copy-structure <scs>
              ^copy-structure <cs>)
   (<scs> ^state <ss>)      # the copy of the task state made in the selection space
   (<cs> ^default-state-copy yes
         ^superstate-operator.name evaluate-operator)
-->
   (<cs> ^duplicate-of <ss>)}

### Copy down operator

sp {evaluate-operator*elaborate*state*look-ahead-operator*copy
   :default
   (state <s> ^problem-space.name <p>
              ^copy-structure <cs>)
   (<cs> ^default-operator-copy yes
         ^superstate-operator <so>)
   (<so> ^name evaluate-operator
         ^superoperator <o>
         ^superproblem-space.name <p>)
-->
   (<s> ^look-ahead-operator <copy-o>
        ^untried-tied-operator <copy-o>) # SBW 5/7/2007-- -^tried-tied-operator -> ^untried-tied-operator
   (<copy-o> ^duplicate-of <o>)}

## Create pointer for uniform access even in no copy
### Added test for superproblem-space.  This restricts these productions
### to only fire in a lookahead.  Previously, these productions made it
### impossible to use evaluation problem spaces other than lookahead.

sp {evaluate-operator*elaborate*state*look-ahead-operator*no-copy
   :default
   (state <s> ^problem-space.name <p>
              ^copy-structure <cs>)
   (<cs> ^default-operator-copy no
         ^superstate-operator <so>)
   (<so> ^name evaluate-operator
         ^superoperator <o>
         ^superproblem-space.name <p>)
-->
   (<s> ^look-ahead-operator <o>)
   (<s> ^untried-tied-operator <o>)}

### install copy of operator in lookahead context is in \task-operator.soar

################################## Return Results
sp {evaluate-operator*elaborate*symbolic-evaluation*from-subgoal
   :default
   (state <s> ^copy-structure <cs>
              ^ { << required-success success partial-success
                   indifferent partial-failure exhaustion-failure 
                   failure prohibit-failure >> <svalue> } <d>)
   (<cs> ^superstate-operator <so>
         ^superstate <ss>)
   (<ss> ^operator <so>
         ^evaluation <e>)        
   (<so> ^name evaluate-operator
         ^evaluation <e>)
   (<e> ^desired <d>)
-->
   (<e> ^symbolic-value <svalue>)}

##  Added to handle duplicated desireds
sp {evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired
   :default
   (state <s> ^copy-structure <cs>
              ^ { << required-success success partial-success
                  indifferent partial-failure exhaustion-failure failure prohibit-failure
                  >> <svalue> } <deb>)
   (<cs> ^superstate-operator <so>
         ^superstate <ss>)
   (<ss> ^operator <so>
         ^evaluation <e>)         
   (<so> ^name evaluate-operator
         ^evaluation <e>)
   (<e> ^desired <eb>)
   (<deb> ^duplicate-of <eb>)
-->
   (<e> ^symbolic-value <svalue>)}

sp {evaluate-operator*elaborate*numeric-evaluation*from-subgoal
   :default
   (state <s> ^copy-structure <cs>
               ^desired <d>
               ^numeric-value <v>)
   (<cs> ^superstate-operator <so>
         ^superstate <ss>)
   (<ss> ^operator <so> 
         ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>)
   (<e> ^desired <d>)
-->
   (<e> ^numeric-value <v>)}

sp {evaluate-operator*elaborate*expected-evaluation*from-subgoal
   :default
   (state <s> ^copy-structure <cs>
               ^desired <d>
               ^expected-value <v>)
   (<cs> ^superstate-operator <so>
         ^superstate <ss>)
   (<ss> ^operator <so> 
         ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>)
   (<e> ^desired <d>)
-->
   (<e> ^expected-value <v>)}

###
###      7.3.2.1. State Copying in evaluate-operator substate
###

## Switch to look at current problem space, not super
## If no signals on problem space, the default is to copy both state and operator

### Set up identifier mapping table for state duplication.

sp {evaluate-operator*elaborate*state*add-one-level-attributes
   :default
   (state <s> ^copy-structure <cs>)
   (<cs> ^duplicate-of.<att> <val>  
         ^superstate-operator.name evaluate-operator
         ^problem-space.one-level-attributes <att>
         ^default-state-copy yes
         ^state <css>)
-->
   (<css> ^<att> <val>)}

### Copy one-level-attributes.
#
#sp {evaluate-operator*elaborate*state*add-all-attributes-at-level-one*state
#   :default
#   (state <s> ^copy-structure <cs>)
#   (<cs> ^problem-space <p>
#         ^superstate-operator.name evaluate-operator
#         ^default-state-copy yes
#         ^all-attributes-at-level one
#         ^duplicate-of <ss>
#         ^state <css>)
#   (<p> -^dont-copy-anything
#        -^dont-copy <att>)
#   (<ss> ^{ <> duplicate-of <> tried-tied-operator <> problem-space
#            <> impasse <> attribute <> choices <> quiescence
#            <> operator <> superstate <> type <> name <> look-ahead-operator
#            <att> } <val>)
#-->
#   (<css> ^<att> <val>)}
#

## Copy all attributes, when ^all-attributes-at-level one.

sp {evaluate-operator*elaborate*state*add-all-attributes-at-level-one
   :default
   (state <s> ^copy-structure <cs>)
   (<cs> ^problem-space <p>
         ^superstate-operator.name evaluate-operator
         ^default-state-copy yes
         ^all-attributes-at-level one
         ^duplicate-of <ss>)
   (<p> -^dont-copy-anything
        -^dont-copy <att>)
   (<ss> ^{ <> duplicate-of <> tried-tied-operator <> problem-space
            <> impasse <> attribute <> choices <> quiescence
            <> operator <> superstate <> type <> name <> look-ahead-operator
            <att> } <val>)
-->
   (<s> ^<att> <val>)}

### If we copied a one-level-attribute, and it later turned
### out that its value happened to be something that was pointed to by a
### two-level-attribute, change its value to be the copied object.

sp {evaluate-operator*elaborate*state*change-one-level-attribute-to-duplicate
   :default
   (state <s> ^copy-structure <cs>
              ^<att> <id>)
   (<cs> ^problem-space.one-level-attributes <att>
         ^superstate-operator.name evaluate-operator
         ^default-state-copy yes
         ^duplicates.<id> <new-id>
         ^duplicate-of.<att> <id>)
-->
   (<s> ^<att> <id> -
        ^<att> <new-id>)}

### Fixes, when all-attributess-at-level one.

sp {evaluate-operator*elaborate*state*change-all-attributes-at-level-one-to-duplicate
   :default
   (state <s> ^copy-structure <cs>)
   (<cs> -^problem-space.dont-copy <att>
          ^superstate-operator.name evaluate-operator
          ^default-state-copy yes
          ^all-attributes-at-level one
          ^duplicates.<id> <new-id>
          ^duplicate-of.{ <> tried-tied-operator <att> } <id>)
-->
   (<s> ^<att> <id> -
        ^<att> <new-id>)}

### Create new ids for two-level-attributes.
# selection*elaborate*state*duplicate-id-for-attribute

### Create new ids for all attributes, when ^all-attributes-at-level two.
# selection*elaborate*state*duplicate-id-for-all-attributes


## -------------------------------
## Desired copying:
## -------------------------------

## Copy attributes to the duplicate desired state.  We
## do this after the state is installed so that the duplicates table
## will already have been filled in.  We just copy all attributes over
## from the original operator, except that attributes that pointed to
## objects that have been duplicated (on the state) are modified to point
## to the duplicate objects.

sp {evaluate-operator*elaborate*state*eval*desired
   :default
   (state <s> ^copy-structure.superstate-operator <so>)
   (<so> ^name evaluate-operator
         ^evaluation.desired <d>
         ^default-desired-copy yes)
-->
   (<s> ^desired <d-copy>)
   (<d-copy> ^duplicate-of <d>)}


## Copy attributes whose values haven't been duplicated.

### SBH/mvp 9-2-94
### Also, added the condition that the desired be attached to
### an evaluation superoperator.  This is because if we use the same
### desired in a lower lookahead context, this production re-firing
### can cause stupid chunks.

sp {duplicate-desired*copy-old-value
   :default
   (state <s> ^copy-structure <cs>
              ^super-copy-structure.duplicates <sd>
              ^desired <d-copy>)
   (<cs> ^superstate-operator <so>
         ^problem-space <p>
         ^duplicates <d>)
   (<so> ^name evaluate-operator
         ^evaluation.desired <d>)
   (<d-copy> ^duplicate-of <dd>)
   (<dd> ^{ <> duplicate-of <att> } <val>)
 - (<p> ^dont-copy <att>)
   (<sd> -^<val>)
-->
   (<d-copy> ^<att> <val>)}

## Copy attributes whose values have been duplicated.

sp {duplicate-desired*replace-old-value
   :default 
   (state <s> ^copy-structure.problem-space <p>
              ^super-copy-structure.duplicates <sd>
              ^desired <d-copy>)
   (<d-copy> ^duplicate-of <d>)
   (<p> -^dont-copy <att>)
   (<d> ^ { <> duplicate-of <att> } <id>)   
   (<dup> ^<scopy-id> <copy-id>)
   (<sd> ^<id> <scopy-id>)
-->
   (<d-copy> ^<att> <copy-id>)}


###      7.3.2.3 Operator copying
###
### Copy attributes to the duplicate operator.  We
### do this after the state is installed so that the duplicates table
### will already have been filled in.  We just copy all attributes over
### from the original operator, except that attributes that pointed to
### objects that have been duplicated (on the state) are modified to point
### to the duplicate objects.

sp {evaluate-operator*elaborate*operator*default-operator-copy-nothing
   :default
   (state <s> ^copy-structure <cs>)
   (<cs> ^superstate-operator.name evaluate-operator
         ^problem-space <ps>)
   (<ps> -^default-operator-copy)
-->
   (<cs> ^default-operator-copy yes)}


sp {evaluate-operator*elaborate*operator*copy-default-operator-copy-from-problem-space
   :default
   (state <s> ^copy-structure <cs>)
   (<cs> ^superstate-operator.name evaluate-operator
         ^problem-space <ps>)
   (<ps> ^default-operator-copy <yes-or-no>)
-->
   (<cs> ^default-operator-copy <yes-or-no>)}

### Set up identifier mapping table for operator

sp {evaluate-operator*elaborate*state*create-duplicates-table-for-operator-only
   :default
   (state <s> ^impasse no-change
              ^attribute operator
              ^copy-structure <cs>
              ^default-operator-copy yes
            - ^default-state-copy yes)  # Create only if won't be created for state
-->
   (<cs> ^duplicates <d>)}

### Copy attributes whose values haven't been duplicated.
###

sp {evaluate-operator*elaborate*operator*add-attribute-to-duplicate-operator
   :default
   (state <s> ^copy-structure.problem-space <p>
              ^super-copy-structure.duplicates <sd>
              ^look-ahead-operator <o-copy>)
   (<o-copy> ^duplicate-of <o>)
   (<o> ^ { <> duplicate-of <att> } <val>)
   (<p> -^dont-copy <att>
        -^no-local-negations <nln>)
   (<sd> -^<val>)
-->
   (<o-copy> ^<att> <val>)}

### Copy attributes whose values have been duplicated.

sp {evaluate-operator*elaborate*operator*add-duplicated-attribute-to-duplicate-operator
   :default
   (state <s> ^copy-structure <cs>
              ^super-copy-structure.duplicates <sd>
              ^look-ahead-operator <o-copy>)
   (<cs> ^duplicates <d>
         ^problem-space <p>)
   (<o-copy> ^duplicate-of <o>)
   (<o> ^ { <> duplicate-of <att> } <id>)
   (<p> -^dont-copy <att>
        -^no-local-negations <nln>)
   (<d> ^<scopy-id> <copy-id>)
   (<sd> ^<id> <scopy-id>)
-->
   (<o-copy> ^<att> <copy-id>)}


sp {evaluate-operator*elaborate*operator*add-attribute-to-duplicate-operator*nln
   :default
   (state <s> ^copy-structure.problem-space <p>
              ^look-ahead-operator <o-copy>)
   (<o-copy> ^duplicate-of <o>)
   (<o> ^ { <> duplicate-of <att> } <val>)
   (<p> ^no-local-negations <nln>)
-->
   (<o-copy> ^<att> <val>)}


